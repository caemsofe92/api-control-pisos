/// <reference types="node" />
import Transport from "winston-transport";
import { BlobServiceClient } from "@azure/storage-blob";
import type { LogEntry } from "winston";
/**
 * Azure storage account credential variants
 */
declare type Account = {
    name: string;
    key: string;
} | {
    host: string;
    sasToken: string;
} | {
    connectionString: string;
};
/**
 * File extensions for the log file. More can be added
 */
export declare enum extensions {
    LOG = ".log"
}
interface IWinstonAzureBlob {
    account: Account;
    azBlobClient: BlobServiceClient;
    blobName: string;
    buffer: Array<LogEntry>;
    bufferLogSize: number;
    containerName: string;
    eol: string;
    extension?: extensions;
    rotatePeriod: string;
    syncTimeout: number;
    timeoutFn: NodeJS.Timeout | null;
}
/**
 * Default options for AzureBlob
 */
export declare type ILoggerDefaults = Pick<IWinstonAzureBlob, "account" | "blobName" | "bufferLogSize" | "containerName" | "eol" | "extension" | "rotatePeriod" | "syncTimeout">;
export declare class WinstonAzureBlob extends Transport implements IWinstonAzureBlob {
    account: Account;
    azBlobClient: BlobServiceClient;
    blobName: string;
    buffer: Array<LogEntry>;
    bufferLogSize: number;
    containerName: string;
    eol: string;
    extension: extensions | undefined;
    rotatePeriod: string;
    syncTimeout: number;
    timeoutFn: NodeJS.Timeout | null;
    constructor(opts: Transport.TransportStreamOptions & Partial<ILoggerDefaults>);
    static tackOnRotatePeriodToBlobName({ blobName, rotatePeriod, }: Pick<IWinstonAzureBlob, "blobName" | "rotatePeriod">): string;
    static tackOnExtensionToBlobName({ blobName, extension, }: Pick<IWinstonAzureBlob, "blobName" | "extension">): string;
    static generateBlobName({ blobName, extension, rotatePeriod, }: Pick<IWinstonAzureBlob, "blobName" | "extension" | "rotatePeriod">): string;
    static createAzBlobClient(account_info: Account): BlobServiceClient;
    private static chunkString;
    private static isValidAccountOpts;
    private static appendBlobOperation;
    log(info: LogEntry, next: () => void): void;
    private push;
    private logToAppendBlob;
}
export declare const winstonAzureBlob: (opts: ConstructorParameters<typeof WinstonAzureBlob>[0]) => WinstonAzureBlob;
export {};
//# sourceMappingURL=winston-azure-blob.d.ts.map